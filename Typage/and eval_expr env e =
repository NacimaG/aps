and eval_expr env e =
	match e with 
			ASTTrue -> InN(1)
			|ASTFalse -> InN(0)
			|ASTNum n -> InN(v(n))
			|ASTId x -> getValEnv env x 
			|ASTPrim(op, e1, e2) -> let x = (string_of_op op)
									and InN(v1) = eval_expr env e1
									and InN(v2) = eval_expr env e2
									in InN(pi x (v1, v2))
			|ASTUPrim(uop, e1) ->  let x =  (string_of_uop uop)
									and  InN(v) = eval_expr env e1
									in InN (pi x (v,1)) 	
									
			|ASTIf(e1,e2,e3) ->( if (eval_expr env e1) = InN(1) then 
								let InN(v1) = (eval_expr env e2)
								in InN(v1)
								else 
								let InN(v2) = (eval_expr env e3)
								in InN(v2)
			)
			|ASTExprs(e1,e2) ->(
				let ASTId (f) = e1 in 
				let e = getValEnv env f in
				match e with
				| InF(e,args,envC) -> ( let new_env =  appendArgsValsEnv env (args,e2) in
										eval_expr new_env e
				)
				|InFR(e,args,envC,x) -> ( let new_env =  appendArgsValsEnv env (args,e2) in
										  eval_expr new_env e
				) 
			)
	